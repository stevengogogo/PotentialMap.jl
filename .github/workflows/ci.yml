name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.5'
          #- 'nightly'
        os:
          - [self-hosted, TWCC]
          #- ubuntu-latest
          #- macOS-latest
          #- windows-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - name: install python
        uses: actions/setup-python@v2
        with:
            python-version: '3'
      - name: Install Python dependencies
        run: |
             python -m pip install --upgrade pip
             pip install  matplotlib 
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: Julia config
        run: mkdir -p ~/.julia/config && cp .github/workflows/startup.jl ~/.julia/config
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      #- run: |
             #julia --project=PotentialMap -e '
             #using Pkg
             #ENV["PYTHON"]=""
             #Pkg.build("PyCall")
             #Pkg.instantiate()'
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
  