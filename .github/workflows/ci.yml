name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.5'
          - 'nightly'
        os:
          - [self-hosted, TWCC]
          #- ubuntu-latest
          #- macOS-latest
          #- windows-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - name: install python
        uses: actions/setup-python@v2
        with:
            python-version: '3'
      - name: Install Python dependencies
        run: |
             python -m pip install --upgrade pip
             pip install  matplotlib 
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - run: |
             julia
             using Pkg
             ENV["PYTHON"] = ""
             Pkg.build()
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: [self-hosted, TWCC]
    steps:
      - name: Setup python 
        uses: actions/setup-python@v2
        with:
          python-version: '3'
      - name: Install dependencies
        run: |
             python -m pip install --upgrade pip
             pip install scipy numpy matplotlib 
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
          julia --project=docs -e '
            using Pkg
            ENV["PYTHON"] = "" # avoid using internal python
            Pkg.build
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - run: |
          julia --project=docs -e '
            using Documenter: doctest
            using PotentialMap
            doctest(PotentialMap)'
      - run: julia --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
